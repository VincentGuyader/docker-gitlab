FROM ubuntu:18.10 AS gitlab_builder
# docker build -t genshen/gitlab-builder  .
# add denpendency libs and c/c++ compilers, git, ruby, go, node here.
LABEL maintainer="genshenchu@gmail.com"

ARG RUBY_DOWNLOAD_RUL="https://cache.ruby-lang.org/pub/ruby/2.4/ruby-2.4.4.tar.gz"
ARG GOLANG_DOWNLOAD_URL="https://dl.google.com/go/go1.11.linux-amd64.tar.gz"
ARG NODEJS_DOWNLOAD_URL="https://nodejs.org/dist/v8.12.0/node-v8.12.0-linux-x64.tar.xz"

## todo move some env to ARG
ENV BUILD_PROS=16 \
    GITLAB_VERSION=11.3.0 \
    GITLAB_WORKHORSE_VERSION=6.1.0 \
    GITLAB_PAGES_VERSION=1.1.0 \
    GITALY_SERVER_VERSION=0.120.0 \
    GITLAB_USER="git" \
    GITLAB_HOME="/home/git" \
    GITLAB_LOG_DIR="/var/log/gitlab" \
    GITLAB_CACHE_DIR="/tmp/docker-gitlab" \
    RAILS_ENV=production

## https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/
COPY ubuntu18.10.sources.list /etc/apt/sources.list.1
# COPY script/build/install-gitlab.sh ${GITLAB_BUILD_DIR}/

#RUN chmod +x ${GITLAB_BUILD_DIR}/install-gitlab.sh \
#    && bash ${GITLAB_BUILD_DIR}/install-gitlab.sh

# https://docs.gitlab.com/ee/install/installation.html#1-packages-dependencies
# install ca-certificates apt-transport-https packages for downloading from https website(e.g. golang, nodejs).
RUN apt-get update \
    && DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y ca-certificates \
    && mv /etc/apt/sources.list.1 /etc/apt/sources.list \
    && apt-get update \
    && DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y sudo wget git-core \
    build-essential zlib1g-dev libyaml-dev libssl-dev libgdbm-dev libre2-dev libreadline-dev libncurses5-dev libffi-dev curl openssh-server checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libicu-dev logrotate rsync python-docutils pkg-config cmake \
    && echo "installing golang." \
    && wget ${GOLANG_DOWNLOAD_URL} -O /tmp/golang.tar.gz \
    && tar -C /usr/local -xzvf /tmp/golang.tar.gz \
    && rm /tmp/golang.tar.gz \
    && echo "installing ruby." \
    && wget ${RUBY_DOWNLOAD_RUL} -O /tmp/ruby.tar.gz \
    && mkdir /tmp/ruby-src \
    && tar -xzf /tmp/ruby.tar.gz -C /tmp/ruby-src --strip-components=1 \
    && cd /tmp/ruby-src \
    && ./configure --disable-install-rdoc \
    && make -j ${BUILD_PROS} \
    && make install \
    && gem install bundler --no-ri --no-rdoc \
    && cd /tmp \
    && rm -rf /tmp/ruby-src /tmp/ruby.tar.gz \
    && echo "installing node."\
    && wget ${NODEJS_DOWNLOAD_URL} -O /tmp/node.tar.xz \
    && mkdir /usr/local/node \
    && tar -xf /tmp/node.tar.xz -C /usr/local/node --strip-components=1 \
    && export PATH=/usr/local/node/bin:~/.yarn/bin:$PATH \
    && npm install --global yarn \
    && rm /tmp/node.tar.xz

ENV GOROOT="/usr/local/go" \
    NODE_HOME="/usr/local/node" \
    YARN_BIN_GITLAB_USER="${GITLAB_HOME}/.yarn/bin" \
    GITLAB_INSTALL_DIR="${GITLAB_HOME}/gitlab" \
    GITLAB_GITALY_INSTALL_DIR="${GITLAB_HOME}/gitaly" \
    GITLAB_DATA_DIR="${GITLAB_HOME}/data" \
    GITLAB_BUILD_DIR="${GITLAB_CACHE_DIR}/build" \
    GITLAB_RUNTIME_DIR="${GITLAB_CACHE_DIR}/runtime"

# Sudo resets PATH, along with many other environment variables, for security reasons.
# It doesn't matter what is set in /etc/profile, unless you run sudo -i.
# see https://serverfault.com/questions/11899/how-to-override-a-path-environment-variable-in-sudo
# so, we add PATH to file /etc/profile.
RUN echo "configure git user." \
    && rm -rf /etc/ssh/ssh_host_*_key /etc/ssh/ssh_host_*_key.pub \
    && adduser --disabled-login --gecos 'GitLab' ${GITLAB_USER} \
    && passwd -d ${GITLAB_USER} \
    && sudo -HEu ${GITLAB_USER} git config --global core.autocrlf input \
    && sudo -HEu ${GITLAB_USER} git config --global gc.auto 0 \
    && sudo -HEu ${GITLAB_USER} git config --global repack.writeBitmaps true
    # deprecated: echo "\nexport PATH=/usr/local/go/bin:/usr/local/node/bin:~/.yarn/bin:\$PATH" >> /etc/profile \
